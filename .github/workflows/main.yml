name: Deploy
run-name: "${{ github.actor }} is deploying: ${{ github.event.head_commit.message }}"
on:
  push:
    branches:
      - 'main'
env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  APP_NAME: ${{ vars.APP_NAME }}
  ECR_IMAGE_TAG: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.APP_NAME }}
  GHCR_IMAGE_TAG: ${{ vars.GHCR_REGISTRY }}/${{ vars.APP_NAME }}
jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: "checkout"
        uses: actions/checkout@v3
      - name: "setup terraform"
        uses: hashicorp/setup-terraform@v2
      - name: "fetch kubeconfig"
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
      - name: "authenticate with aws"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      - name: "cache terraform state"
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ hashFiles('terraform/**') }}
          path: |
            terraform/.terraform
            terraform/.terraform.lock.hcl
      - name: "terraform init"
        if: steps.cache.outputs.cache-hit != 'true'
        run: terraform init
      - name: "terraform apply"
        if: steps.cache.outputs.cache-hit != 'true'
        run: terraform apply -auto-approve
  build-and-push-image:
    needs: deploy-infra
    runs-on: ubuntu-latest
    steps:
      - name: "checkout"
        uses: actions/checkout@v3
      - name: "authenticate with aws"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      - name: "log into ecr"
        uses: aws-actions/amazon-ecr-login@v1
      - name: "log into ghcr"
        # repo and package must be linked (https://github.com/users/OWNER/packages/container/PACKAGE/settings)
        # repo must have write permissions on the package (https://github.com/users/OWNER/packages/container/PACKAGE/settings)
        # GITHUB_TOKEN must have write permissions (https://github.com/OWNER/REPO/settings/actions; Workflow permissions)
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "set up qemu"
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ vars.TARGETARCH }}
      - name: "set up buildx"
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.ECR_IMAGE_TAG }}:latest
          cache-from: type=registry,ref=${{ env.GHCR_IMAGE_TAG }}:latest
          cache-to: type=registry,ref=${{ env.GHCR_IMAGE_TAG }}:latest,mode=max
          platforms: ${{ vars.TARGETOS }}/${{ vars.TARGETARCH }}
  apply-kubernetes:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    env:
      HOST: ${{ vars.HOST }}
      PORT: ${{ vars.PORT }}
      APP_KEYS: ${{ secrets.APP_KEYS }}
      API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
      ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
      DATABASE_CLIENT: ${{ vars.DATABASE_CLIENT }}
      DATABASE_HOST: ${{ vars.DATABASE_HOST }}
      DATABASE_PORT: ${{ vars.DATABASE_PORT }}
      DATABASE_NAME: ${{ vars.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ vars.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_SSL: ${{ vars.DATABASE_SSL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - name: "checkout"
        uses: actions/checkout@v3
      - name: "authenticate with aws"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      - name: "log into ecr"
        uses: aws-actions/amazon-ecr-login@v1
      - name: "install kubectl"
        uses: azure/setup-kubectl@v3
      - name: "fetch kubeconfig"
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
      - name: "apply kubernetes manifests"
        run: "kubernetes/apply.sh"
